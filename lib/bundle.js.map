{"version":3,"sources":["webpack:///webpack/bootstrap 14513d9c2b1237905bc3","webpack:///./lib/util.js","webpack:///./lib/other_moray.js","webpack:///./lib/player.js","webpack:///./lib/pellet.js","webpack:///./lib/moving_morays.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/moray_section.js","webpack:///./lib/morays.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC,0BAA0B;AAChE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;;;;;;;;;;AC9EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AClDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA,qFAAkC,uBAAuB;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,iFAA+B,qBAAqB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;AC7IA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;AC5DA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;ACtBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 14513d9c2b1237905bc3","\nclass Util {\n  dir(vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1/norm);\n  }\n\n  dist (posA, posB) {\n    let distX = Math.pow(posA.x - posB.x, 2);\n    let distY = Math.pow(posA.y - posB.y, 2);\n    let dist = Math.sqrt(distX + distY);\n    return dist;\n  }\n\n  norm (vec) {\n    return Util.dist([0, 0], vec);\n  }\n\n  randomVec (length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  genVec (length) {\n    const deg = 2 * Math.PI;\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  scale (vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  }\n\n  // wrap (coord, max) {\n  //   if (coord < 0) {\n  //     return max - (coord % max);\n  //   } else if (coord > max) {\n  //     return coord % max;\n  //   } else {\n  //     return coord;\n  //   }\n  // }\n\n  genColor () {\n    const gen = '0123456789ABCDEF';\n    let color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += gen[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  getRandomInt() {\n    let min = Math.ceil(10);\n    let max = Math.floor(100000000);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n}\n\nexport default Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 0\n// module chunks = 0","import MovingMorays from './moving_morays';\nimport Player from './player';\nimport Pellet from './pellet';\nimport Util from './util';\n\nexport default class OtherMoray extends MovingMorays {\n  constructor(options) {\n    super(options);\n    this.util = new Util();\n    this.game = options.game;\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Pellet) {\n      otherObject.eaten();\n      // add section\n      this.radius += 3;\n      return true;\n    }\n    else if (otherObject instanceof Player) {\n      let nextX = this.x + this.radius + this.velX;\n      let nextY = this.y + this.radius + this.velY;\n      // console.log(nextX == otherObject.x);\n      // console.log(nextX);\n      // console.log(otherObject.x);\n      let radii = this.radius + otherObject.radius;\n\n      let otherX = otherObject.x + otherObject.radius;\n      let otherY = otherObject.y + otherObject.radius;\n      // console.log(otherX);\n      // console.log(otherY);\n\n\n      if (nextX == otherX && nextY === otherY){\n        otherObject.eaten();\n      } else {\n        this.eaten();\n        otherObject.radius += 3;\n      }\n        // let amtPellets = this.radius;\n        // let pos = this.pos;\n        // let that = this;\n\n        // this.eaten();\n        // otherObject.radius += 2;\n\n        // drop pellets\n        // while (amtPellets > 0) {\n        //   let pellet = new Pellet({pos: pos, game: that.game});\n        //   // that.game.pellets.push(pellet);\n        //   amtPellets -= 1;\n        // }\n        return true;\n    } else if (otherObject instanceof OtherMoray) {\n        this.eaten();\n        // drop pellets\n        otherObject.radius += 3;\n        return true;\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/other_moray.js\n// module id = 1\n// module chunks = 0","import MovingMorays from './moving_morays';\nimport OtherMoray from './other_moray';\nimport Pellet from './pellet';\nimport Util from './util';\n\nexport default class Player extends MovingMorays {\n  constructor(options) {\n    super(options);\n    this.playerLength = 4;\n    this.playerTail = [];\n    this.x = 250;\n    this.y = 200;\n    this.color = '#97E2D6';\n    this.canvas = options.canvas;\n    this.context = options.context;\n    this.canvasPos = this.getPosition(this.canvas);\n    this.setMousePosition = this.setMousePosition.bind(this);\n    this.canvas.addEventListener(\"mousemove\", this.setMousePosition, false);\n  }\n\n  collideWith(otherObject) {\n    if (otherObject instanceof Pellet) {\n      otherObject.eaten();\n      return true;\n    } else if (otherObject instanceof OtherMoray) {\n      this.eaten();\n      return true;\n    }\n  }\n\n  // cursor logic\n  setMousePosition(e) {\n    this.mouseX = e.clientX - this.canvasPos.x;\n    this.mouseY = e.clientY - this.canvasPos.y;\n    this.x = this.mouseX;\n    this.y = this.mouseY;\n    this.pos = this.getPos();\n  }\n\n  getPosition(canvas) {\n    let xPosition = 0;\n    let yPosition = 0;\n\n    while (canvas) {\n      xPosition += (canvas.offsetLeft - canvas.scrollLeft + canvas.clientLeft);\n      yPosition += (canvas.offsetTop - canvas.scrollTop + canvas.clientTop);\n      canvas = canvas.offsetParent;\n    }\n\n    const canvasPos = {\n      x: xPosition,\n      y: yPosition\n    };\n\n    return canvasPos;\n  }\n\n  draw() {\n    this.context.beginPath();\n    this.context.arc(\n    this.mouseX, this.mouseY, this.radius, 0, 2 * Math.PI, true);\n    this.context.fillStyle = this.color;\n    this.context.fill();\n    this.context.closePath();\n  }\n}\n\n\n  // buttonPress(e) {\n  //     if (e.button === 0) {\n  //         console.log(\"Left mouse button pressed!\");\n  //     } else if (e.button === 1) {\n  //         console.log(\"Middle mouse button pressed!\");\n  //     } else if (e.button === 2) {\n  //         console.log(\"Right mouse button pressed!\");\n  //     } else {\n  //         console.log(\"Things be crazy up in here!!!\");\n  //     }\n  // }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 2\n// module chunks = 0","import Util from './util';\nimport Player from './player';\nimport OtherMoray from './other_moray';\n\nexport default class Pellet {\n  constructor(options) {\n    this.game = options.game;\n    this.x = options.pos.x;\n    this.y = options.pos.y;\n    this.pos = {x: this.x, y: this.y};\n    this.radius = 3;\n    this.util = new Util();\n    this.id = this.util.getRandomInt();\n    // this.color = this.util.genColor();\n    this.color = '#FF6677';\n    this.color = this.hexToRgba(this.color);\n    // this.remove = this.remove.bind(this);\n  }\n\n  hexToRgba(hex) {\n    let color = hex.substring(1).split('');\n    color = '0x' + color.join('');\n    color = 'rgba('+\n      [(color >> 16)&255, (color >> 8)&255, color&255]\n      .join(',')+',.9)';\n    return color;\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = this.util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  collideWith(otherObject) {\n    otherObject.radius += 4;\n    this.eaten();\n  }\n\n  eaten() {\n    this.game.remove(this);\n  }\n\n  draw(ctx) {\n    // this.color = this.hexToRgba(this.color);\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, true);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/pellet.js\n// module id = 3\n// module chunks = 0","import Util from './util';\nimport MoraySection from './moray_section';\n\nclass MovingMorays {\n  constructor(options) {\n    // this.cursor = options.cursor;\n    this.game = options.game;\n    this.pos = options.pos || {\n        x: Math.random() * window.WIDTH,\n        y: Math.random() * window.HEIGHT};\n    this.x = this.pos.x;\n    this.y = this.pos.y;\n    this.vel = [0.7, 0.7];\n    this.velX = this.vel[0];\n    this.velY = this.vel[1];\n    // this.speed = 4;\n    // this.turn = 4;\n    // this.forward = 0;\n    // this.lose = false;\n    this.util = new Util();\n    this.id = this.util.getRandomInt();\n    this.color = this.util.genColor();\n    this.radius = 7;\n    this.count = 0;\n  }\n\n  move(timeDelta) {\n    const velocityScale = timeDelta / 30;\n\n    let offsetX = this.velX * velocityScale;\n    let offsetY = this.velY * velocityScale;\n\n    if (this.count < 60) {\n      this.count += 1;\n    }\n    else {\n      this.count = 0;\n      let array = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1];\n      this.velX *= array[Math.floor(Math.random() * 2)];\n      this.velY *= array[Math.floor(Math.random() * 2)];\n    }\n\n    this.x = this.x + offsetX;\n    this.y = this.y + offsetY;\n    this.pos = this.getPos();\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = this.util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(\n      this.x, this.y, this.radius, 0, 2 * Math.PI, true\n    );\n\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  eaten() {\n    this.game.remove(this);\n  }\n\n  getDirection(pos) {\n    let x = pos.x;\n    let y = pos.y;\n    let d = Math.atan2(y, x) * (180 / Math.PI);\n    if(d < 0){ d = 180 - d; }\n    return d;\n  }\n\n  // Return a randomly oriented vector with the given length.\n  randomVec (length) {\n    const deg = 2 * Math.PI * Math.random();\n    return this.util.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  // Scale the length of a vector by the given amount.\n  scale (vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  }\n\n  getPos() {\n    return {x: this.x, y: this.y};\n  }\n\n  // getTurn() {\n  //   let theta = Math.atan2( (this.pointer().y - this.sprite.y), (this.pointer().x - this.sprite.x));\n  //\n  //   theta = _.clean(_.toDeg(theta) + 90);\n  //   let newForward = _.clean(this.forward);\n  //\n  //   if (Math.floor(newForward / 9) !== Math.floor(_.clean(theta) / 9)) {\n  //     newForward += _.clean(newForward - theta) > 180 ? this.turnRate : -this.turnRate;\n  //   }\n  //   this.forward = newForward;\n  // }\n}\n\nexport default MovingMorays;\n\n\n  //\n  // vel() {\n  //   return {x: this.velX, y: this.velY};\n  // }\n  //\n\n  // getMove() {\n  //   // for children to decide\n  // }\n\n  // getVel() {\n  //   this.velX = Math.sin();\n  //   this.velY = -Math.cos();\n  // }\n\n  // updatePos() {\n  //   this.x += this.velX;\n  //   this.y += this.velY;\n  //   this.getMove();\n  // }\n\n  //\n  // getDrift() {\n  //\n  // }\n\n  // addSection(cursor) {\n  //   return new MoraySection(cursor, cursor(), this.id, this.color);\n  // }\n\n  // drawSection() {\n  //   this.morayLength.forEach(section => section);\n  // }\n\n  // addLength() {\n  //   while (this.morayLength < 2) {\n  //     let cursor;\n  //     if (this.morayLength.length === 0) {\n  //         cursor = this.pos.bind(this);\n  //     } else {\n  //       let endDot = this.morayLength.slice(-1)[0];\n  //       cursor = endSection.pos;\n  //     }\n  //     this.morayLength.push(this.createMoraySection(cursor));\n  //   }\n  // }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moving_morays.js\n// module id = 4\n// module chunks = 0","import Player from './player';\nimport OtherMoray from './other_moray';\nimport Pellet from './pellet';\nimport Util from './util';\n\nexport default class Game {\n  constructor(canvas, context) {\n    this.otherMorays = this.addMorays();\n    window.otherMorays = this.otherMorays;\n    this.pellets = this.addPellets();\n    this.canvas = canvas;\n    this.context = context;\n    this.player = [new Player({\n      canvas: this.canvas,\n      context: this.context\n    })];\n    this.util = new Util();\n  }\n\n  addMorays() {\n    let morays = [];\n    for (let i = 0; i < Game.NUM_MORAYS; i++) {\n      let pos = this.randomPos();\n      morays.push(new OtherMoray({ pos: pos, game: this }));\n    }\n    console.log(morays);\n    return morays;\n  }\n\n  addPellets() {\n    let pellets = [];\n    for (let i = 0; i < Game.NUM_PELLETS; i++) {\n      let pos = this.randomPos();\n      pellets.push(new Pellet({pos: pos, game: this}));\n    }\n    return pellets;\n  }\n\n  randomPos() {\n    return {\n      x: Math.round((window.WIDTH - 27) * Math.random()),\n      y: Math.round((window.HEIGHT - 27) * Math.random())\n    };\n  }\n\n  allObj() {\n    return [].concat(this.pellets, this.otherMorays, this.player);\n  }\n\n  step(timeDelta) {\n    this.moveObj(timeDelta);\n    this.checkCollisions();\n  }\n\n  moveObj(timeDelta) {\n    this.allObj().forEach((obj) => {\n      if (obj instanceof Pellet || obj instanceof Player) {\n        null;\n      } else {\n        obj.move(timeDelta);\n      }\n    });\n  }\n\n  // outOfBounds() {\n  //   return (pos[0] < 0) || (pos[1] < 0) ||\n  //   (pos[0] > this.canvas.width) || (pos[1] > this.canvas.height);\n  // }\n\n  draw() {\n    this.context\n      .clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    const that = this;\n\n    this.allObj().forEach(\n      (el) => {\n        el.draw(that.context);\n      }\n    );\n  }\n\n  // wrap(pos) {\n  //   return [\n  //     Util.wrap(pos[0], window.WIDTH), this.util.wrap(pos[1], window.HEIGHT)\n  //   ];\n  // }\n\n  collideWith(otherObject) {\n    const centerDist = this.util.dist(this.pos, otherObject.pos);\n    return centerDist < (this.radius + otherObject.radius);\n  }\n\n  checkCollisions() {\n    const allObj = this.allObj();\n    for (let i = 0; i < allObj.length; i++) {\n      for (let j = i + 1; j < allObj.length; j++) {\n        const obj1 = allObj[i];\n        const obj2 = allObj[j];\n        // let thing = obj1.isCollidedWith(obj2);\n        if (obj1.isCollidedWith(obj2)) {\n          const collision = obj1.collideWith(obj2);\n          if (collision) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  remove(obj) {\n    if (obj instanceof Pellet) {\n      this.pellets.splice(this.pellets.indexOf(obj), 1);\n    } else if (obj instanceof OtherMoray) {\n      this.otherMorays.splice(this.otherMorays.indexOf(obj), 1);\n      // this.allObj = this.allObj();\n    } else if (obj instanceof Player) {\n      this.player.splice(this.player.indexOf(obj), 1);\n      // ADD END GAME LOGIC\n    }\n  }\n\n}\n//\n// const FPS = 33;\n// const INTERVAL = 1000/FPS;\n// const STEP = INTERVAL/1000;\n\nconst CONTROLS = {\n  x: 250,\n  y: 200\n};\n\nconst setMousePosition = (e) => {\n  CONTROLS.x = e.clientX;\n  CONTROLS.y = e.clientY;\n};\n\nwindow.addEventListener(\"mousemove\", setMousePosition, false);\n\nGame.NUM_MORAYS = 10;\nGame.NUM_PELLETS = 30;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 5\n// module chunks = 0","import Util from './util';\nimport Player from './player';\nimport OtherMoray from './other_moray';\n\nclass GameView {\n  constructor(game, ctx, canvas) {\n    this.ctx = ctx;\n    this.game = game;\n    this.canvas = canvas;\n    this.util = new Util();\n    this.player = this.game.player;\n  }\n\n  play() {\n    this.lastTime = 0;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n    this.lastTime = time;\n    this.game.step(timeDelta);\n    this.game.draw(this.ctx);\n    this.gameWon();\n    this.gameLost();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  gameWon() {\n    if (this.game.otherMorays.length === 0) {\n      // write that they've won\n      // change spacebar key scope to reset\n      // either reload on spacebar, or generate new element.\n      this.ctx.font = '30px serif';\n      this.ctx.textAlign = 'center';\n      var gradient = this.ctx.createLinearGradient(0,0,this.canvas.width,0);\n          gradient.addColorStop(\"0\",\"magenta\");\n          gradient.addColorStop(\"0.5\",\"blue\");\n          gradient.addColorStop(\"1.0\",\"red\");\n      this.ctx.fillStyle = gradient;\n      this.ctx.fillText( 'YOU WIN! Press spacebar to reset.', 250, 200);\n    }\n  }\n\n  //  [100, window.WIDTH]\n\n  gameLost() {\n    if (this.game.player.length == 0) {\n      // write that they've lost\n      // change spacebar key scope to reset\n      // either reload on spacebar, or generate new element.\n      this.ctx.font = '30px serif';\n      this.ctx.textAlign = 'center';\n      this.ctx.strokeText( 'You lose. Press spacebar to reset.', 250, 200);\n    }\n  }\n\n}\n\n\nexport default GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 6\n// module chunks = 0","class MoraySection {\n  constructor() {\n\n  }\n\n  // drawcircles in class ---------------\n  drawAllCircles() {\n    for (var i = 0; i < 40; i++) {\n      var r = Math.round(15 + Math.random() * 150);\n\n      var xPos = Math.round(Math.random() * window.WIDTH);\n      var yPos = Math.round(Math.random() * window.HEIGHT);\n\n      var newSection = Object.create(MoraySection);\n      newSection.setup(xPos, yPos);\n      newSection.idValue = i;\n      newSection.draw();\n    }\n  }\n\n}\n\nexport default MoraySection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/moray_section.js\n// module id = 7\n// module chunks = 0","import Game from './game';\nimport GameView from './game_view';\n\nwindow.WIDTH = 500;\nwindow.HEIGHT = 400;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const canvasEl = document.getElementById('canvas');\n  const ctx = canvasEl.getContext('2d');\n\n  canvasEl.width = window.WIDTH;\n  canvasEl.height = window.HEIGHT;\n\n  const playOrReset = () => {\n    let game = new Game(canvasEl, ctx);\n    let gameView = new GameView(game, ctx, canvasEl);\n    gameView.play();\n  };\n\n  key(\"space\", playOrReset);\n});\n\n//\n// // define shortcuts with a scope\n// key('space', 'play', () => gameView.play());\n// key('space', 'reset', () => gameView.reset());\n//\n// // set the scope (only 'all' and 'issues' shortcuts will be honored)\n// key.setScope('play'); // default scope is 'all'\n//\n// // remove all events that are set in 'issues' scope\n// key.deleteScope('play');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/morays.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}